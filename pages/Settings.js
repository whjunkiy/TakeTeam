import React, { Component } from 'react';
import Checkbox from 'expo-checkbox';
import store from '../redux/store';
import {Container, Header, Content, Form, Item, Input, Button, Text, Title, Toast, Icon} from 'native-base';
import {
    ActivityIndicator,
    StyleSheet,
    Image,
    TouchableOpacity,
    Dimensions,
    ScrollView,
    SafeAreaView,
    Modal, TextInput
} from 'react-native';
import {View} from "react-native";
import Bottom from "../components/Bottom";
import larr from "../assets/l_arrow.png";
import rarr from "../assets/r_arrow.png";
import reqs from "../assets/requests.png"
import krst from "../assets/x.png";
import bigava from "../assets/defava.png";
import approved from '../assets/approved.png';
import {SaveProfile3, saveProfile, saveProfile2, getCits, getMyReqs, approveSub, KMP} from "../redux/actions";
const { width, height } = Dimensions.get('screen');

export default class Settings extends React.Component {
    constructor(props) {
        super(props);
        this._isMounted = false;
        this.nCstate = store.getState();
        this.private = false;
        this.popup = true;
        this.citref = null;
        this.city = '...';
        if (this.nCstate.login.info.hasOwnProperty('private')) {
            this.private = this.nCstate.login.info.private;
        }
        if (this.nCstate.login.info.hasOwnProperty('popup')) {
            this.popup = this.nCstate.login.info.popup;
        }
        if (this.nCstate.login.info.hasOwnProperty('city')) {
            this.city = this.nCstate.login.info.city;
        }
        this.inpref = null;
        this.navi = this.props.navigation;
        this.maxWidth = width;
        this.maxHeight = height;
        if (width > 900) {
            this.maxWidth = 900;
        }

        this.state= {
            confirma: 0,
            private: this.private,
            city: this.city,
            citiesToShow: [],
            showInfo: false,
            info: 0, popup: this.popup,
            cityinp: '', SL: false,
            isLoading: false,
            pass: '', mail: '', sr: 0,
            reqs: [], ap: [],
            showReqs: false
        };
        this.changePrivate = this.changePrivate.bind(this);
        this.changeCity = this.changeCity.bind(this);
        this.showCities = this.showCities.bind(this);
        this.setMyCity = this.setMyCity.bind(this);
        this.showM = this.showM.bind(this);
        this.showReqs = this.showReqs.bind(this);
        this.delMe = this.delMe.bind(this);
        this.setNewPass = this.setNewPass.bind(this);
        this.setNewMail = this.setNewMail.bind(this);
        this.approv = this.approv.bind(this);
        this.delConf = this.delConf.bind(this);
        this.makeCC = this.makeCC.bind(this);
    }

    makeCC() {
        console.log("Searching city 4 = " + this.state.cityinp);
        const state = store.getState();
        const re = new RegExp('^'+ this.state.cityinp + '(.*)', 'i');
        let cities = [];
        state.cities.cities.map((c,i) =>{
            if (c.match(re)) {
                cities.push(c);
            }
        });
        this.setState({citiesToShow: cities, SL: false});
    }

    approv(r,i){
        const state = store.getState();
        store.dispatch(approveSub(state.login.email, state.login.token, r.email));
        let ap = this.state.ap;
        ap[i] = 1;
        this.setState({ap: ap});
    }

    setNewPass(){
        if (!this.state.pass.trim()) return;
        const state = store.getState();
        store.dispatch(SaveProfile3(state.login.email, state.login.token, this.state.mail, this.state.pass));
    }
    setNewMail(){
        if (!this.state.mail.trim()) return;
        const state = store.getState();
        store.dispatch(SaveProfile3(state.login.email, state.login.token, this.state.mail, this.state.pass));
    }

    showM(t) {
        this.setState({info: t, showInfo: true});
    }

    async showReqs(){
        //console.log("ShowRegs... ");
        const state = store.getState();
        store.dispatch(getMyReqs(state.login.email, state.login.token));
    }

    async delMe() {
        const state = store.getState();
        store.dispatch(KMP(state.login.email, state.login.token));
    }

    delConf(){
        this.setState({confirma: 1})
    }

    async changePopup(){
        const state = store.getState();
        if (this._isMounted && state.login.status > 0) {
            //store.dispatch(getMySms(this.nCstate.login.email, this.nCstate.login.token));
            let privt = true;
            if (this.state.popup) {
                privt = false;
            }
            store.dispatch(saveProfile2(this.nCstate.login.email, this.nCstate.login.token, this.state.private, privt));
            this.setState({popup: !this.state.popup});
        }
    }

    async setMyCity(city){
        const state = store.getState();
        this.setState({isLoading: true});
        if (this._isMounted && state.login.status > 0) {
            //store.dispatch(getMySms(this.nCstate.login.email, this.nCstate.login.token));
            const q = {
                act: "changeCity",
                email: state.login.email,
                token: state.login.token,
                city: city
            };
            let response = await fetch('https://taketeam.net', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                body: JSON.stringify(q)
            });
            let msg = await response.json();
            store.dispatch({type: 'UPDATE_INFO', uzr: msg.uzr});
            store.dispatch(saveProfile(this.nCstate.login.email, this.nCstate.login.token, city, this.nCstate.login.info.osebe, this.nCstate.login.info.nick));
            this.setState({city: city, isLoading: false, showInfo: false});
        }
    }

    async changeCity(){
        const state = store.getState();
        console.log("Change City ...");
        if (this._isMounted && state.login.status > 0 && state.cities.status < 1) {
            console.log("Here1 ");
            store.dispatch(getCits(state.login.email, state.login.token));
            this.showCities();
        } else if (this._isMounted && state.login.status > 0 && state.cities.status > 0) {
            console.log("Here2 ");
            this.setState({isLoading: true});
            this.showCities();
        }
    }

    showCities() {
        this.setState({showInfo: true, info: 0, isLoading: false});
    }

    async changePrivate() {
        const state = store.getState();
        if (this._isMounted && state.login.status > 0) {
            let privt = true;
            if (this.state.private) {
                privt = false;
            }
            store.dispatch(saveProfile2(this.nCstate.login.email, this.nCstate.login.token, privt, this.state.popup));
        }
        this.setState({private: !this.state.private});
    }

    async componentDidMount() {
        this._isMounted = true;
        store.subscribe(() => {
            if (this._isMounted) {
                const state = store.getState();
                if (state.login.status < 1) {
                    this.navi.navigate('MainList', {title: 'Главная'});
                    return;
                }
                if (state.page.disabled !== this.state.isLoading) {
                    this.setState({isLoading: state.page.disabled})
                }
                if (state.subs.rnd !== this.state.sr) {
                    let ap = [];
                    for (let i in state.subs.reqs) ap.push(0);
                    this.setState({sr: state.subs.rnd, reqs: state.subs.reqs, showReqs: true, ap: ap});
                }
            }
        });
    }

    async componentWillUnmount() {
        this._isMounted = false;
        store.subscribe(() => {});
        return function cleanup() {
            this._isMounted = false;
            store.subscribe(()=>{});
        };
    }

    render() {
        let fS = 28, pad = 200, fS2 = 24, mt = 0;
        if (width < 900) {
            fS = 20;
            pad = 20;
            fS2 = 16;
            mt = 4;
        }
        if (this.state.isLoading) {
            return (
                <Container style={{width: '100%', height: '100%'}}>
                    <SafeAreaView style={styles.loaderContainer}>
                        <ActivityIndicator size="large" color="#ff0054" style={styles.loader}/>
                    </SafeAreaView>
                </Container>
            )
        } else if (this.state.confirma) {
            return (
                <Container style={{width: '100%', height: '100%'}}>
                    <SafeAreaView style={[styles.loaderContainer, {flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center', alignContent: 'center', flexDirection: 'column'}]}>
                        <Text style={{fontFamily: 'Tahoma'}}>Точно удалять?</Text>
                        <SafeAreaView style={{flexDirection: 'row', marginTop: 10}}>
                            <TouchableOpacity onPress={()=>{this.delMe();}} style={[styles.button, styles.buttonClose, {minWidth: 58, backgroundColor: '#fe0074'}]}>
                                <Text style={[styles.textStyle, {fontFamily: 'ProximaNova', fontSize: 20, textTransform: 'uppercase'}]}>Да</Text>
                            </TouchableOpacity>
                            <TouchableOpacity onPress={()=>{this.setState({confirma: 0})}} style={[styles.button, styles.buttonClose, {backgroundColor: '#b0b0b0', marginLeft: 30}]}>
                                <Text style={[styles.textStyle, {fontFamily: 'ProximaNova',  fontSize: 20, textTransform: 'uppercase'}]}>Нет</Text>
                            </TouchableOpacity>
                        </SafeAreaView>
                    </SafeAreaView>
                </Container>
            )
        } else if (this.state.showInfo && this.state.info === 0) {
            let mw = this.maxWidth - 120;
            let mw2 = this.maxWidth - 100;
            let mh = Math.ceil(this.maxHeight/2.5);
            let mh2 =  this.maxHeight-250;
            let KS = 30;
            let l = '105%';
            if (width < 900) {
                mw = this.maxWidth-20;
                mw2 = this.maxWidth-10;
                mh = this.maxHeight-150;
                mh2 = this.maxHeight - 100;
                KS = 20;
                l = '104%'
            }
            this.citref = React.createRef();
            return (
                <Container style={{fontFamily: 'Tahoma'}}>
                    <SafeAreaView style={{minHeight: 20}}></SafeAreaView>
                    <SafeAreaView style={[styles.centeredView]}>
                        <Modal
                            animationType="slide"
                            transparent={true}
                            visible={this.state.modalVisible}
                            style={{borderWidth: 0}}
                        >
                            <SafeAreaView style={[styles.centeredView, {width: width, height: mh2, maxHeight: mh2}]}>
                                <SafeAreaView  style={[styles.modalView, {padding: 5, margin: 5, paddingTop: 10, width: mw2, height: mh2, maxHeight: mh2,}]}>
                                    <Item style={{
                                        maxWidth: mw-40,
                                        borderStyle: 'solid',
                                        borderColor: '#bbbbbb',
                                        backgroundColor: '#fafafa',
                                        borderRadius: 5,
                                        borderTopWidth: 1,
                                        borderLeftWidth: 1,
                                        borderRightWidth: 1,
                                        borderBottomWidth: 1,
                                        height: 30,
                                        maxHeight: 30,
                                        marginTop: 0,
                                        marginLeft: 0,
                                    }}>
                                        <TouchableOpacity onPress={()=>{this.searchPpl()}}>
                                            <Icon name="ios-search"/>
                                        </TouchableOpacity>
                                        <Input
                                            placeholder="Искать"
                                            style={{maxHeight: 30, height: 30, }}
                                            ref={input => {
                                                this.searchInput = input
                                            }}
                                            onFocus={()=>{
                                                //console.log("onFocus KB");
                                                //console.log(inpContRef);
                                                this.citref.current.setNativeProps({marginTop: 255});
                                            }}
                                            onBlur={()=>{
                                                this.citref.current.setNativeProps({marginTop: 5});
                                            }}
                                            onEndEditing={()=>{
                                                //console.log("onEndEditing KB");
                                                this.citref.current.setNativeProps({marginTop: 5});
                                            }}
                                            onChange={e => {
                                                this.setState({cityinp: e.nativeEvent.text, SL: true});
                                                if (e.nativeEvent.text.trim().length > 0) {
                                                    setTimeout(()=>{this.makeCC();}, 100);
                                                }
                                            }}
                                        />
                                    </Item>
                                    <TouchableOpacity
                                        style={{zIndex: 9999, width: 20, height: 20, position: 'absolute', top: 15, right: 12}}
                                        onPress={()=>{
                                            this.setState({showInfo: false})
                                        }}>
                                        <Image source={krst} style={{width: 20, height: 20}} />
                                    </TouchableOpacity>
                                    <SafeAreaView style={{
                                        width: mw2-10,
                                        minWidth: mw2-10,
                                        marginTop: 10,
                                        paddingLeft: 10,
                                        height: mh2 - 70,
                                        maxHeight: mh2 -70,
                                        minHeight: mh2- 70,
                                        alignContent: "flex-start",
                                        flex: 1, flexWrap: 'wrap',
                                        justifyContent: "flex-start",
                                        alignItems: "flex-start",
                                        flexDirection: "column"
                                    }}>
                                        <ScrollView style={{width: '100%'}}>
                                            {this.state.SL ?
                                                <TouchableOpacity onPress={()=>{}}>
                                                    <Text style={{
                                                        width: '100%',
                                                        fontFamily: 'Tahoma',
                                                        fontSize: 22,
                                                        marginTop: 5
                                                    }}>Loading...</Text>
                                                </TouchableOpacity>
                                                :
                                                this.state.citiesToShow.map((c,i)=>{
                                                    return (
                                                        <TouchableOpacity key={i} onPress={()=>{this.setMyCity(c)}}>
                                                            <Text style={{
                                                                width: '100%',
                                                                fontFamily: 'Tahoma',
                                                                fontSize: 22,
                                                                marginTop: 5
                                                            }}>{c}</Text>
                                                        </TouchableOpacity>
                                                    )
                                                })
                                            }
                                        </ScrollView>
                                    </SafeAreaView>
                                </SafeAreaView>
                            </SafeAreaView>
                        </Modal>
                    </SafeAreaView>
                </Container>
            )
        } else if (this.state.showInfo && this.state.info > 0) {
            let mw = this.maxWidth - 120;
            let mw2 = this.maxWidth - 100;
            let mh = Math.ceil(this.maxHeight/2.5);
            let mh2 =  this.maxHeight-250;
            let l = '65%';
            if (width < 900) {
                mw = this.maxWidth-20;
                mw2 = this.maxWidth-10;
                mh = this.maxHeight-150;
                mh2 = this.maxHeight - 100;
                l = '80%'
            }
            let text = '';
            if (this.state.info === 1) {
                text = 'Благодарим вас за обратную связь!\n' +
                'По всем интересующим вопросам и предложениям\n' +
                'просим обращаться по адресу:\n' +
                '\n' +
                'ADMIN@TAKETEAM.NET';
            } else {
                text = 'Добро пожаловать в TAKETEAM!\n' +
                    '\n' +
                    '\n' +
                    'Настоящие Условия использования ("Условия") регулируют использование вами TAKETEAM (если прямо не указано, что применяются отдельные условия, а не эти) и содержат информацию о Сервисе TAKETEAM ("Сервис"), изложенную ниже. \n' +
                    '\n' +
                    '\n' +
                    'Создавая аккаунт TAKETEAM или используя TAKETEAM,\n' +
                    '\n' +
                    'вы принимаете настоящие условия. \n' +
                    '\n' +
                    'Таким образом, настоящие Условия использования представляют собой соглашение между вами и TAKETEAM.\n' +
                    '\n' +
                    '\n' +
                    'Пользователь обязан полностью ознакомиться с настоящими Правилами до момента регистрации на Сайте. Регистрация Пользователя на Сайте означает полное и безоговорочное принятие Пользователем настоящих Правил.\n' +
                    '\n' +
                    '                       \n' +
                    '\n' +
                    'СЕРВИС TAKETEAM \n' +
                    '\n' +
                    'Мы соглашаемся предоставлять вам Сервис TT. Сервис включает в себя все продукты, функции, сервисы, технологии и программное обеспечение ТТ,которые мы предоставляем для выполнения миссии ТТ.\n' +
                    '\n' +
                    '\n' +
                    'TAKETEAM — здесь твои единомышленники!\n' +
                    '\n' +
                    '\n' +
                    'TAKETEAM - медийная платформа о развлечениях и культурном досуге с элементами социальной сети.\n' +
                    '\n' +
                    '\n' +
                    'На нашем сервисе люди смогут узнать о новейших мероприятиях, почитать комментарии к ним, и самое главное, найти спутников для совместного посещения выбранного евента!\n' +
                    '\n' +
                    '\n' +
                    'Также приложение удобно использовать как органайзер в мире досуга, чтобы не пропустить важные и интересные события!\n' +
                    '\n' +
                    'Сделайте профиль «приватным» и никто не узнает о ваших планах!\n' +
                    '\n' +
                    '\n' +
                    'Наши основные задачи:\n' +
                    '\n' +
                    '\n' +
                    '1. Анонс городских мероприятий\n' +
                    '\n' +
                    '2. Побуждение людей к культурному досугу\n' +
                    '\n' +
                    '3. Возможность любому человеку найти своих единомышленников и соратников\n' +
                    '\n' +
                    '4. Возможность любому человеку пригласить людей на своё мероприятие\n' +
                    '\n' +
                    ' Права на Сайт в целом и на использование сетевого адреса (доменного имени) принадлежат Администрации Сайта. Последняя предоставляет доступ к Сайту всем заинтересованным лицам в соответствии с настоящими Правилами и действующим законодательством Российской Федерации.\n' +
                    '\n' +
                    '\n' +
                    '\n' +
                    '\n' +
                    '\n' +
                    'Сервис включает следующие компоненты:\n' +
                    '\n' +
                    '\n' +
                    'Предложение персонализированной возможности создавать, общаться, узнавать новое и обмениваться информацией.\n' +
                    '\n' +
                    '.\n' +
                    '\n' +
                    '\n' +
                    'Создание благоприятной, открытой для всех и безопасной среды.\n' +
                    '\n' +
                    'Мы разрабатываем и используем инструменты и предлагаем участникам нашего сообщества ресурсы, помогающие обеспечить в ТТ  положительное и открытое для всех взаимодействие, в том числе тогда, когда считаем, что они могут нуждаться в помощи. У нас также есть команды и системы для борьбы со злоупотреблениями и нарушениями наших Условий и политик, а также вредным и вводящим в заблуждение поведением. Мы используем всю имеющуюся у нас информацию (в том числе вашу информацию), чтобы обеспечивать безопасность нашей платформы.\n' +
                    '\n' +
                    '( Подробнее см. в ПОЛИТИКЕ ИСПОЛЬЗОВАНИЯ ДАННЫХ.)\n' +
                    '\n' +
                    '\n' +
                    'Разработка и использование технологий, которые помогают нам обслуживать наше растущее сообщество.\n' +
                    'Организация и анализ информации в рамках растущего сообщества ТТ очень важны для нашего Сервиса. Значительной его составляющей является создание и использование передовых технологий, которые помогают нам персонализировать, защищать и улучшать наш Сервис для широкого мирового сообщества. Такие технологии, как искусственный интеллект и машинное обучение, дают нам возможность применять в нашем Сервисе сложные процессы. Автоматизированные технологии также помогают нам обеспечивать функционирование и целостность нашего Сервиса.\n' +
                    '\n' +
                    ' \n' +
                    '\n' +
                    'Обеспечение доступа к нашему Сервису.\n' +
                    '\n' +
                    'Для обеспечения работы нашего глобального Сервиса нам необходимо хранить и передавать данные между нашими системами по всей стране,( в том числе за пределами страны вашего проживания)? Использование этой глобальной инфраструктуры является необходимой и неотъемлемой предпосылкой предоставления нашего Сервиса.\n' +
                    '\n' +
                    '\n' +
                    '\n' +
                    'Исследования и инновации.\n' +
                    'Мы используем имеющуюся у нас информацию, чтобы изучать наш Сервис и в сотрудничестве с другими лицами проводить исследования с целью его улучшения и повышения эмоционального благополучия нашего сообщества.\n' +
                    '\n' +
                    '\n' +
                    'Политика использования данных\n' +
                    'Для предоставления нашего Сервиса нам необходимо собирать и использовать вашу информацию. В ПОЛИТИКЕ ИСПОЛЬЗОВАНИЯ ДАННЫХ разъясняется, как мы собираем, используем и передаем информацию в ТТ. В ней также описано множество имеющихся у вас способов управления вашей информацией, включая НАСТРОЙКИ КОНФИДЕНЦИАЛЬНОСТИ и БЕЗОПАСНОСТИ  ТТ. Чтобы использовать ТТ, вы должны принять Политику использования данных.\n' +
                    '\n' +
                    ' Регистрация Пользователя на Сайте является бесплатной, добровольной и производится посредством инструмента ТТ. Регистрация и/или авторизация на Сайте посредством ТТ означает согласие с Правилами и Пользовательским соглашением\n' +
                    '\n' +
                    ' Пользователем Сайта является физическое лицо, зарегистрированное на Сайте в соответствии с установленным настоящими Правилами порядком, достигшее возраста, допустимого в соответствии с законодательством Российской Федерации для акцепта настоящих Правил, и обладающее соответствующими полномочиями (ранее и далее – Пользователь).\n' +
                    '\n' +
                    ' При регистрации на Сайте Пользователь обязан предоставить Администрации Сайта необходимую достоверную и актуальную информацию для формирования персональной страницы Пользователя, включая уникальные для каждого Пользователя логин и пароль доступа к Сайту, а также фамилию и имя. Регистрационная форма Сайта может запрашивать у Пользователя дополнительную информацию.\n' +
                    '\n' +
                    ' Пользователь несет ответственность за достоверность, актуальность, полноту и соответствие законодательству Российской Федерации предоставленной при регистрации информации и ее чистоту от претензий третьих лиц.\n' +
                    '\n' +
                    ' После предоставления информации Пользователю необходимо пройти ряд удостоверительных процедур, а именно, (а) подтвердить регистрацию путем распознания автоматизированного теста, предназначенного для различия компьютеров и людей («капчи»); (б) подтвердить регистрацию путем введения в соответствующую форму на Сайте кода, полученного Пользователем в виде sms-сообщения от Администрации Сайта на мобильный телефон Пользователя, номер которого предоставляется самим Пользователем. В случае верного последовательного выполнения всех регистрационных действий на Сайте создается персональная страница Пользователя, имеющая сетевой адрес вида ТТ Пользователь вправе присвоить персональной странице короткое (поддоменное) имя, заменяющее порядковый номер id при адресации в сети Интернет. В качестве поддоменного имени не могут быть выбраны слова и наименования, использование которых запрещено в соответствии с настоящими Правилами, действующим законодательством Российской Федерации и международными правовыми актами, в том числе, но не ограничиваясь, нецензурная лексика, наименования, зарегистрированные как товарные знаки (вне зависимости от класса МКТУ), фирменные наименования и коммерческие обозначения, если пользователю не принадлежат исключительные права на них. В случае обнаружения нарушения данных условий Администрация вправе запретить Пользователю использование присвоенного им поддоменного имени, в том числе, если применимо, передать право его использования надлежащему лицу (представителю правообладателя). Пользователь вправе зарегистрировать не более одной персональной страницы на Сайте.\n' +
                    '\n' +
                    ' При регистрации Пользователь соглашается с настоящими Правилами и принимает на себя указанные в них права и обязанности, связанные с использованием и функционированием Сайта. Пользователь соглашается на получение посредством сервисов Администрации Сайта и/или сервисов третьих лиц электронных сообщений, sms и иных видов рассылок информационного, в т.ч. рекламно-информационного, содержания, в том числе от партнеров Администрации Сайта\n' +
                    '\n' +
                    'После успешной регистрации Пользователя на Сайте Администрация принимает на себя права и обязанности перед Пользователем, указанные в настоящих Правилах.\n' +
                    '\n' +
                    ' Обработка персональных данных Пользователя осуществляется в соответствии с законодательством Российской Федерации. Администрация Сайта обрабатывает персональные данные Пользователя в целях предоставления Пользователю доступа к использованию функционала Сайта, в том числе в целях получения Пользователем таргетированной рекламы; проверки, исследования и анализа таких данных, позволяющих поддерживать и улучшать функционал и разделы Сайта, а также разрабатывать новый функционал и разделы Сайта. Администрация Сайта принимает все необходимые меры для защиты персональных данных Пользователя от неправомерного доступа, изменения, раскрытия или уничтожения. Администрация предоставляет доступ к персональным данным Пользователя только тем работникам, подрядчикам и агентам Администрации, которым эта информация необходима для обеспечения функционирования Сайта и предоставления Пользователю доступа к его использованию. Администрация Сайта вправе использовать предоставленную Пользователем информацию, в том числе персональные данные, а также передавать ее третьим лицам, в целях обеспечения соблюдения требований действующего законодательства Российской Федерации, защиты прав и интересов Пользователей, Администрации Сайта, третьих лиц (в том числе в целях выявления, проверки/расследования и/или пресечения противоправных действий). Раскрытие предоставленной Пользователем информации может быть произведено лишь в соответствии с действующим законодательством Российской Федерации по требованию суда, правоохранительных органов, а равно в иных предусмотренных законодательством Российской Федерации случаях. Поскольку Администрация Сайта осуществляет обработку персональных данных Пользователя в целях исполнения настоящих Правил, в силу положений законодательства о персональных данных согласие Пользователя на обработку его персональных данных не требуется.\n' +
                    '\n' +
                    ' Выбранные Пользователем логин и пароль являются необходимой и достаточной информацией для доступа Пользователя на Сайт. Пользователь не имеет права передавать свои логин и пароль третьим лицам, несет полную ответственность за их сохранность, самостоятельно выбирая способ их хранения. Пользователь на используемом им аппаратно-программном обеспечении может разрешить хранение логина и пароля (с использованием файлов cookies) для последующей автоматической авторизации на Сайте.\n' +
                    '\n' +
                    ' Если Пользователем не доказано обратное, любые действия, совершенные с использованием его логина и пароля, считаются совершенными соответствующим Пользователем. В случае несанкционированного доступа к логину и паролю и/или персональной странице Пользователя, или распространения логина и пароля Пользователь обязан незамедлительно сообщить об этом Администрации Сайта в установленном порядке.\n' +
                    '\n' +
                    ' После регистрации Пользователь получает право самостоятельно в личных целях создавать, использовать и определять содержание собственной персональной страницы и условия доступа других Пользователей к ее содержанию, а также получает возможности доступа и размещения информации на персональных страницах других Пользователей (при условии получения соответствующих прав доступа от их обладателей), использования социальных виджетов ТТ на сторонних сайтах без дополнительной авторизации. При использовании социальных виджетов Пользователем сторонним сайтам не предоставляются данные о логине и пароле Пользователя, а также его данные, защищенные настройками приватности.\n' +
                    '\n' +
                    'Ваши обязательства\n' +
                    'В обмен на наше обязательство предоставлять Сервис вы должны взять на себя следующие обязательства перед нами.\n' +
                    '\n' +
                    'Кто может использовать ТТ. Мы хотим, чтобы наш Сервис был максимально открытым и доступным для всех, но вместе с тем безопасным, защищенным и соответствующим требованиям законодательства. Поэтому, чтобы стать частью сообщества ТТ, вы должны соблюдать некоторые ограничения.\n' +
                    '\n' +
                    'Вам должно быть как минимум 13 лет или вы должны достичь минимального возраста, начиная с которого в вашей стране законодательно разрешено использовать ТТ..\n' +
                    '\n' +
                    'Вам не должно быть запрещено получать какой-либо из компонентов нашего Сервиса в соответствии с действующим законодательством или использовать Сервисы, связанные с платежами, если вы входите в действующие списки запрещенных лиц.\n' +
                    '\n' +
                    'Ваш аккаунт не должен быть ранее отключен нами за нарушение законодательства или каких-либо наших правил.\n' +
                    '\n' +
                    'Вы не должны быть осуждены за совершение преступления на сексуальной почве.\n' +
                    '\n' +
                    'Запрещенные способы использования ТТ. Предоставление безопасного и открытого Сервиса широкому сообществу требует, чтобы каждый из нас соблюдал правила.\n' +
                    '\n' +
                    'Вы не имеете права выдавать себя за других людей или предоставлять неточную информацию.\n' +
                    'Вы не обязаны раскрывать свою личность в Instagram, но вы должны предоставить нам точную и актуальную информацию (в том числе регистрационную), которая может включать персональные данные. Кроме того, вы не имеете права выдавать себя за людей, которыми не являетесь, или представлять компании, к которым не имеете отношения, а также создавать аккаунты для других лиц без их прямого разрешения.\n' +
                    '\n' +
                    'Вы не имеете права совершать незаконные, вводящие в заблуждение или обманные действия либо иные действия в незаконных или несанкционированных целях.\n' +
                    '\n' +
                    'Вы не имеете права нарушать (а также помогать другим лицам или призывать их нарушать) настоящие Условия или наши правила.\n' +
                    '\n' +
                    ' \n' +
                    '\n' +
                    'Вы не имеете права препятствовать нормальной работе Сервиса или вмешиваться в его работу.\n' +
                    'Сюда относится ненадлежащее использование каналов для жалоб, споров и запросов на обжалование, например отправка мошеннических или необоснованных жалоб либо запросов на обжалование.\n' +
                    '\n' +
                    'Вы не имеете права предпринимать попытки создания аккаунтов, сбора информации или доступа к ней несанкционированными способами.\n' +
                    'Сюда относятся создание аккаунтов или сбор информации с помощью автоматизированных средств без нашего прямого разрешения.\n' +
                    '\n' +
                    'Вы не имеете права продавать, передавать по лицензии или покупать какие-либо аккаунты или данные, полученные от нас или из нашего Сервиса.\n' +
                    'Сюда относятся попытки покупки, продажи или передачи каких-либо данных вашего аккаунта (в том числе вашего имени пользователя), запроса, сбора или использования учетных данных для входа или значков других пользователей, а также запроса или сбора имен пользователей и паролей в Instagram либо присвоения чужих маркеров доступа.\n' +
                    '\n' +
                    'Вы не имеете права без разрешения публиковать личную или конфиденциальную информацию пользователей или иным способом нарушать чьи-либо права, в том числе права на интеллектуальную собственность (например, путем нарушения авторского права, права на товарный знак, распространения контрафактных или пиратских товаров).\n' +
                    '\n' +
                    'Вы вправе использовать чужие работы в соответствии с исключениями или ограничениями в отношении авторского права и смежных прав, предусмотренными применимым законодательством. Вы заверяете, что вы владеете контентом, который публикуете или которым делитесь, либо получили на него все необходимые права. Подробнее о том, как пожаловаться на контент, который, по вашему мнению, нарушает ваши права на интеллектуальную собственность, см. ЗДЕСЬ.\n' +
                    '\n' +
                    'Вы не имеете права изменять, переводить или реконструировать какие-либо наши продукты или их компоненты либо пытаться создать производные работы на их основе.\n' +
                    '\n' +
                    'Вы не имеете права использовать в своем имени пользователя доменное имя или URL без нашего предварительного письменного согласия.\n' +
                    '\n' +
                    'Вы не имеете права изменять, переводить или реконструировать какие-либо наши продукты или их компоненты либо пытаться создать производные работы на их основе.\n' +
                    '\n' +
                    'Вы не имеете права использовать в своем имени пользователя доменное имя или URL без нашего предварительного письменного согласия.\n' +
                    '\n' +
                    'Разрешения, которые вы предоставляете нам. В рамках нашего соглашения вы также даете нам разрешения, необходимые для предоставления Сервиса.\n' +
                    '\n' +
                    'Разрешение на использование вашего имени пользователя, фото профиля и информации о ваших отношениях и действиях в связи с аккаунтами.\n' +
                    '\n' +
                    'Вы даете нам разрешение на показ вашего имени пользователя, фото профиля и информации о ваших действиях (например, отметках "Нравится") или отношениях (например, подписках) рядом или в связи с аккаунтами.\n' +
                    '\n' +
                    'Вы соглашаетесь с тем, что мы можем скачивать и устанавливать обновления Сервиса на ваше устройство.\n' +
                    '\n' +
                    ' Пользователю при использовании Сайта запрещается:\n' +
                    '\n' +
                    ' регистрироваться в качестве Пользователя от имени или вместо другого лица («фальшивый аккаунт») или регистрировать группу (объединение) лиц или юридическое лицо в качестве Пользователя. При этом возможна регистрация от имени и по поручению другого физического лица или юридического лица при условии получения необходимых полномочий в порядке и форме, предусмотренных законодательством Российской Федерации;\n' +
                    '\n' +
                    ' вводить Пользователей в заблуждение относительно своей личности, используя логин и пароль другого зарегистрированного Пользователя;\n' +
                    '\n' +
                    ' искажать сведения о себе, своем возрасте или своих отношениях с другими лицами или организациями;\n' +
                    '\n' +
                    ' загружать, хранить, публиковать, распространять и предоставлять доступ или иным образом использовать любую информацию, которая:\n' +
                    '\n' +
                    '(а) содержит угрозы, призывы к насилию, в том числе скрытые, одобрение и поощрение насильственных действий, дискредитирует, оскорбляет, порочит честь и достоинство или деловую репутацию или нарушает неприкосновенность частной жизни других Пользователей или третьих лиц;\n' +
                    '\n' +
                    '(б) нарушает права несовершеннолетних лиц;\n' +
                    '\n' +
                    '(в) является вульгарной или непристойной, содержит порнографические изображения и тексты или сцены сексуального характера с участием несовершеннолетних;\n' +
                    '\n' +
                    '(г) содержит сцены бесчеловечного обращения с животными;\n' +
                    '\n' +
                    '(д) содержит описание средств и способов суицида, любое подстрекательство к его совершению;\n' +
                    '\n' +
                    '(е) пропагандирует и/или способствует разжиганию расовой, религиозной, этнической ненависти или вражды, по признакам отнесения к определенным полу, ориентации, а также по иным индивидуальным признакам и особенностям человека (включая вопросы его здоровья);\n' +
                    '\n' +
                    '(ж) содержит экстремистские материалы;\n' +
                    '\n' +
                    '(з) пропагандирует преступную деятельность или содержит советы, инструкции или руководства по совершению преступных действий;\n' +
                    '\n' +
                    '(и) содержит информацию ограниченного доступа, включая, но не ограничиваясь, государственной и коммерческой тайной, информацией о частной жизни третьих лиц;\n' +
                    '\n' +
                    '(к) содержит рекламу или описывает привлекательность употребления наркотических веществ, в том числе «цифровых наркотиков» (звуковых файлов, оказывающих воздействие на мозг человека за счет бинауральных ритмов), информацию о распространении наркотиков, рецепты их изготовления и советы по употреблению;\n' +
                    '\n' +
                    '(л) потенциально может привести к совершению противоправных действий путем введения Пользователей в заблуждение или злоупотребления их доверием;\n' +
                    '\n' +
                    '(м) а также нарушает иные права и интересы граждан и юридических лиц или требования законодательства Российской Федерации.\n' +
                    '\n' +
                    ' незаконно загружать, хранить, публиковать, распространять и предоставлять доступ или иным образом использовать интеллектуальную собственность Пользователей и третьих лиц.\n' +
                    '\n' +
                    ' осуществлять массовые рассылки сообщений в адрес других Пользователей Сайта без их предварительного согласия и/или любые другие аналогичные нежелательные рассылки (спам), в том числе с использованием отдельных функциональных возможностей Сайта (например, счётчиков Сайта, предусмотренных п. 6.3.16 настоящих Правил);\n' +
                    '\n' +
                    ' использовать программное обеспечение и осуществлять действия, направленные на нарушение нормального функционирования Сайта или персональных страниц Пользователей;\n' +
                    '\n' +
                    ' загружать, хранить, публиковать, распространять и предоставлять доступ или иным образом использовать вирусы, трояны и другие вредоносные программы;\n' +
                    '\n' +
                    '. использовать без специального на то разрешения Администрации Сайта автоматизированные скрипты (программы, боты, краулеры) для сбора информации на Сайте и/или взаимодействия с Сайтом и его функционалом;\n' +
                    '\n' +
                    ' любым способом, в том числе, но не ограничиваясь, путем обмана, злоупотребления доверием, взлома, пытаться получить доступ к логину и паролю другого Пользователя;\n' +
                    '\n' +
                    ' осуществлять незаконные сбор и обработку персональных данных других лиц;\n' +
                    '\n' +
                    '. осуществлять использование Сайта иным способом, кроме как через интерфейс, предоставленный Администрацией Сайта, за исключением случаев, когда такие действия были прямо разрешены Пользователю в соответствии с отдельным соглашением с Администрацией;\n' +
                    '\n' +
                    ' размещать любую другую информацию, которая, по личному мнению Администрации, является нежелательной, не соответствует целям создания Сайта, ущемляет интересы Пользователей или по другим причинам является нежелательной для размещения на Сайте;\n' +
                    '\n' +
                    ' осуществлять самостоятельно либо от имени других Пользователей с использованием функционала их аккаунта, в том числе путем введения в заблуждение или с обещанием поощрения, в том числе с использованием любых программ, автоматизированных скриптов, массовые однотипные действия, направленные на искусственное повышение показателей счётчиков Сайта (числа друзей, отметок «Нравится», событий «поделиться» и т.д.)\n' +
                    '\n' +
                    ' Пользователь несет личную ответственность за любую информацию, которую размещает на Сайте, сообщает другим Пользователям, а также за любые взаимодействия с другими Пользователями, осуществляемые на свой риск.\n' +
                    '\n' +
                    ' В случае несогласия Пользователя с настоящими Правилами или их обновлениями, Пользователь обязан отказаться от использования Сайта, проинформировав об этом Администрацию Сайта в установленном порядке.\n' +
                    '\n' +
                    ' \n' +
                    '\n' +
                    'Дополнительные права, которые мы сохраняем за собой\n' +
                    'Если вы выбираете имя пользователя или аналогичное средство идентификации для своего аккаунта, мы оставляем за собой право изменить его, если сочтем это целесообразным или необходимым (например, если оно нарушает чьи-либо права на интеллектуальную собственность или если вы выдаете себя за другого пользователя).\n' +
                    '\n' +
                    'Вы должны получить письменное разрешение у нас или разрешение в рамках открытой лицензии, прежде чем изменять, создавать производные работы, декомпилировать или пытаться иным образом получить от нас исходный код.\n' +
                    '\n' +
                    'Наше соглашение и последствия наших разногласий\n' +
                    'Наше соглашение.\n' +
                    '\n' +
                    'Если какой-либо аспект настоящего соглашения не имеет юридической силы, остальные аспекты остаются в силе.\n' +
                    'Любые поправки к нашему соглашению или отказы от него должны оформляться письменно и подписываться нами. Если мы не добиваемся принудительного исполнения какого-либо аспекта настоящего соглашения, это не считается отказом от него.\n' +
                    'Мы оставляем за собой все права, не предоставленные вам явно.\n' +
                    'Кто обладает правами по настоящему соглашению.\n' +
                    'Настоящее соглашение не дает никаких прав третьим сторонам.\n' +
                    'Вам запрещается передавать свои права или обязанности по настоящему соглашению без нашего согласия.\n' +
                    'Мы вправе уступать наши права и обязанности другим лицам. Например, это может произойти в случае смены собственника (при слиянии, поглощении или продаже активов) или в силу закона.\n' +
                    'Кто понесет ответственность, если что-нибудь случится.\n' +
                    'Наш Сервис предоставляется "как есть", и мы не можем гарантировать его безопасность, защиту и идеальную работу. В ТОЙ МЕРЕ, В КАКОЙ ЭТО РАЗРЕШЕНО ЗАКОНОМ, МЫ ТАКЖЕ ОТКАЗЫВАЕМСЯ ОТ ВСЕХ ПРЯМО ВЫРАЖЕННЫХ И ПОДРАЗУМЕВАЕМЫХ ГАРАНТИЙ, В ТОМ ЧИСЛЕ ПОДРАЗУМЕВАЕМЫХ ГАРАНТИЙ ПРИГОДНОСТИ ДЛЯ ЦЕЛЕЙ, В КОТОРЫХ ОБЫЧНО ИСПОЛЬЗУЮТСЯ ТАКИЕ ПРОДУКТЫ, ИЛИ ДЛЯ КОНКРЕТНЫХ ЦЕЛЕЙ, НЕОТЧУЖДАЕМОСТИ ПРАВА СОБСТВЕННОСТИ И ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ НА ИНТЕЛЛЕКТУАЛЬНУЮ СОБСТВЕННОСТЬ.\n' +
                    'Мы также не контролируем высказывания и действия людей и других лиц и не несем ответственности за их (или ваши) действия и поведение (в сети Интернет и вне ее) или контент (в том числе незаконный или предосудительный). Кроме того, мы не несем ответственности за сервисы и функции, предлагаемые другими людьми или компаниями, даже если вы осуществляете доступ к ним через наш Сервис.\n' +
                    'Наша ответственность за все, что происходит в Сервисе (также именуемая "ответственностью") ограничивается в максимальном объеме, разрешенном законом. В случае возникновения проблем с нашим Сервисом мы не в состоянии предсказать все их возможные последствия. Вы соглашаетесь, что мы не будем нести ответственность за любую упущенную прибыль или доход, потерянную информацию или данные либо за косвенные, штрафные или побочные убытки, возникающие из настоящих Условий или в связи с ними, даже если нам было известно о возможности их возникновения. Это положение распространяется также на удаление нами вашего контента, информации или аккаунта.\n' +
                    'Как мы решаем споры.\n' +
                    'Если вы являетесь потребителем, к любым претензиям, искам и спорам между вами и нами, возникающим из настоящих Условий или в связи с ними ("спор"), применяются законы страны вашего проживания и вы можете решить спор в любом компетентном суде такой страны, которому он подсуден. Во всех прочих случаях вы соглашаетесь, что претензия должна разрешаться исключительно по действующему законодательству Российской Федерации, что вы подчиняетесь персональной юрисдикции любого из этих судов в целях рассмотрения любой такой претензии и что настоящие Условия и любая претензия регулируются законодательством РФ без учета его норм коллизионного права. Не ставя под сомнение вышесказанное, вы соглашаетесь с тем, что ТТ может по своему усмотрению предъявить вам претензию, связанную с попыткой неправомерного использования наших продуктов, вмешательства в их работу или взаимодействия с ними несанкционированным способом, и передать ее в суд на территории страны вашего проживания, юрисдикция которого распространяется на такие претензии.\n' +
                    'Обновление настоящих Условий\n' +
                    'Мы можем изменять наш Сервис и правила, и у нас может возникать необходимость внести изменения в настоящие Условия для точного отражения в них нашего Сервиса и правил. Если иное не требуется по законодательству, мы будем уведомлять вас (например, с помощью нашего Сервиса) перед внесением изменений в настоящие Условия и давать вам возможность ознакомиться с такими изменениями, прежде чем они вступят в силу. Если после этого вы продолжите использовать Сервис, вы обязаны будете соблюдать обновленные Условия. Если вы не согласны с настоящими Условиями или какой-либо обновленной версией Условий, вы можете удалить свой аккаунт здесь.\n\n';
            }
            return (
                <Container style={{fontFamily: 'Tahoma'}}>
                    <SafeAreaView style={{minHeight: 20}}></SafeAreaView>
                    <SafeAreaView style={[styles.centeredView]}>
                        <Modal
                            animationType="slide"
                            transparent={true}
                            visible={this.state.modalVisible}
                            style={{borderWidth: 0}}
                        >
                            <SafeAreaView style={[styles.centeredView, {width: width, height: mh2, maxHeight: mh2}]}>
                                <SafeAreaView style={[styles.modalView, {width: mw2, height: mh2, maxHeight: mh2}]}>
                                    <SafeAreaView style={{marginTop: -10, flex: 1, height: 30, minHeight: 30, maxHeight: 30, display: 'flex', justifyContent: 'center', alignItems: 'center', alignContent: 'center'}}>
                                        <TouchableOpacity
                                            onPress={()=>{
                                                this.setState({showInfo: false})
                                            }}
                                            style={{width: 150, height: 30, minHeight: 30, maxHeight: 30, borderRadius: 5, marginTop: 10}}
                                        >
                                            <SafeAreaView style={{width: 150, backgroundColor: '#fe0074', height: 30, minHeight: 30, maxHeight: 30, borderRadius: 5, flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center', alignContent: 'center'}}>
                                                <Text style={{ color: 'white',
                                                    textTransform: 'uppercase', fontWeight: 'bold', fontSize: 16,
                                                    fontFamily: 'ProximaNova'
                                                }}>Хорошо</Text>
                                            </SafeAreaView>
                                        </TouchableOpacity>
                                    </SafeAreaView>
                                    <SafeAreaView style={{
                                        width: mw2-70,
                                        marginTop: 15,
                                        paddingLeft: 10,
                                        paddingRight: 10,
                                        height: mh2 - 90,
                                        maxHeight: mh2 -90,
                                        minHeight: mh2 - 90,
                                        alignContent: "flex-start",
                                        flex: 1, flexWrap: 'wrap',
                                        justifyContent: "flex-start",
                                        alignItems: "flex-start",
                                        flexDirection: "column"
                                    }}>
                                        <ScrollView style={{width: '100%'}}>
                                            <Text style={{fontFamily: 'Tahoma', fontSize: 13}}>{text}</Text>
                                        </ScrollView>
                                    </SafeAreaView>
                                    <SafeAreaView style={{width: 1, minHeight: 15, height: 15}}>
                                    </SafeAreaView>
                                </SafeAreaView>
                            </SafeAreaView>
                        </Modal>
                    </SafeAreaView>
                </Container>
            )
        } else if (this.state.showReqs) {
            let mw = this.maxWidth - 120;
            let mw2 = this.maxWidth - 100;
            let mh = Math.ceil(this.maxHeight/2.5);
            let mh2 =  this.maxHeight-250;
            let l = '315%';
            let avw = 100;
            let avh = 100, mt33 = 2;
            let aw = 288, FS = 24;
            let ah = 70, fss = 28;
            let pt = 16, pl = 91;
            if (width < 900) {
                mw = this.maxWidth-20;
                mw2 = this.maxWidth-10;
                mh = this.maxHeight-150;
                mh2 = this.maxHeight - 100;
                l = '170%';
                avw = 50;
                mt33 = -2;
                avh = 50;
                aw = 144;
                ah = 35;
                pt = 7;
                pl = 36;
                fss = 18;
                FS = 15;
            }
            return (
                <Container style={{fontFamily: 'Tahoma'}}>
                    <SafeAreaView style={{minHeight: 20}}></SafeAreaView>
                    <SafeAreaView style={[styles.centeredView]}>
                        <Modal
                            animationType="slide"
                            transparent={true}
                            visible={true}
                            style={{borderWidth: 0}}
                        >
                            <SafeAreaView style={[styles.centeredView, {width: width, height: mh2, maxHeight: mh2}]}>
                                <SafeAreaView style={[styles.modalView, {padding: 0, margin: 0, width: mw2, height: mh2, maxHeight: mh2, }]}>
                                    <SafeAreaView style={{
                                        width: mw2-10,
                                        minWidth: mw2-10,
                                        marginTop: 0,
                                        paddingLeft:10,
                                        height: mh2 ,
                                        maxHeight: mh2 ,
                                        minHeight: mh2,
                                        alignContent: "flex-start",
                                        flex: 1, flexWrap: 'wrap',
                                        justifyContent: "flex-start",
                                        alignItems: "flex-start",
                                        flexDirection: "column",
                                    }}>
                                        <SafeAreaView style={{flexDirection: 'row', marginTop: 15}}>
                                            <Image source={larr} style={{width: 24, height: 24, resizeMode: 'cover', marginTop: mt33}}/>
                                            <Text style={{textTransform: 'uppercase', fontWeight: 'bold', fontSize: FS, fontFamily: 'ProximaNova'}}>Запросы</Text>
                                            <TouchableOpacity
                                                style={{zIndex: 9999, position: 'relative', top: 0, left: width - 170, width: 20, height: 20}}
                                                onPress={()=>{
                                                    this.setState({showReqs: false})
                                                }}>
                                                <Image source={krst} style={{width: 20, height: 20}} />
                                            </TouchableOpacity>
                                        </SafeAreaView>
                                        <SafeAreaView style={{width: '100%', minHeight: 1, backgroundColor: 'grey'}}></SafeAreaView>
                                        <SafeAreaView style={{maxHeight: mh2 -70, minHeight: mh2 -70, height: mh2 -70, width: mw2-30}}>
                                        <ScrollView>
                                            {this.state.reqs.map((r,i)=>{
                                                let ava = bigava;
                                                let nick = '...';
                                                if (r.hasOwnProperty('ava')) {
                                                    ava = {uri: 'https://taketeam.net/avas/' + r.ava}
                                                }
                                                if (r.hasOwnProperty('nick')) {
                                                    nick = r.nick;
                                                }
                                                return (
                                                    <SafeAreaView key={i} style={{marginTop: 10,
                                                        flexDirection: 'row',
                                                        justifyContent: 'space-between',
                                                        alignContent: 'center',
                                                        alignItems:'center'}}>
                                                        <TouchableOpacity onPress={()=>{
                                                            store.dispatch({type:"SETPROFILE", mail: r.email, whom: 0});
                                                            this.navi.navigate('profile', {title: 'Профиль', email: r.email, whom: 0})
                                                        }} style={{flexDirection: 'row', alignContent: 'center',
                                                            alignItems:'center', justifyContent: 'center'}}>
                                                            <Image source={ava} style={{width: avw, height: avh, borderRadius: Math.ceil(avw / 2), resizeMode: 'cover'}} />
                                                            <Text style={{fontFamily: 'Tahoma', fontWeight: 'bold', fontSize: 20, marginLeft: 10}}>{nick}</Text>
                                                        </TouchableOpacity>
                                                        {this.state.ap[i] ?
                                                            <Image source={approved} style={{width: aw, height: ah, resizeMode: 'cover'}} />
                                                            :
                                                            <TouchableOpacity onPress={()=>{this.approv(r,i)}}>
                                                                <Text style={{backgroundColor: '#ff0073',
                                                                    color: 'white',
                                                                    fontFamily: 'ProximaNova',
                                                                    fontSize: fss,
                                                                    fontWeight: 'bold',
                                                                    textTransform: 'uppercase',
                                                                    width: aw,
                                                                    height: ah,
                                                                    paddingTop: pt,
                                                                    paddingLeft: pl,
                                                                    borderRadius: 10
                                                                }}>Запрос</Text>
                                                            </TouchableOpacity>
                                                        }
                                                    </SafeAreaView>
                                                )
                                            })}
                                        </ScrollView>
                                        </SafeAreaView>
                                    </SafeAreaView>
                                </SafeAreaView>
                            </SafeAreaView>
                        </Modal>
                    </SafeAreaView>
                </Container>
            )
        } else {
            let picW = 191, picH = 50, coef = width / 900;
            if (width < 900) {
                picW = Math.ceil(picW * coef);
                picH = Math.ceil(picH * coef);
            }
            if (picW < 120) picW = 120;
            if (picH < 30) picH = 30;
            return (
                <Container>
                    <SafeAreaView style={{
                        width: '100%',
                        maxHeight: 50,
                        flex: 1,
                        justifyContent: 'center',
                        alignContent: 'center',
                        alignItems: 'center',
                        flexDirection: 'row'
                    }}>
                        <Image source={larr} style={{width: 24, height: 24}}/>
                        <Text style={{
                            textTransform: 'uppercase',
                            fontWeight: 'bold',
                            fontSize: 26,
                            fontFamily: 'ProximaNova'
                        }}>Настройки</Text>
                        <Image source={rarr} style={{width: 24, height: 24}}/>
                    </SafeAreaView>
                    <SafeAreaView style={{
                        width: '100%',
                        height: this.maxHeight - 450,
                        flex: 1,
                        justifyContent: 'center',
                        alignContent: 'center',
                        alignItems: 'flex-start',
                        flexDirection: 'row'
                    }}>
                        <ScrollView>
                            <SafeAreaView style={{
                                width: '100%',
                                flexDirection: 'column',
                                justifyContent: 'flex-start',
                                alignItems: 'center',
                                alignContent: 'flex-start',
                                flex: 1,
                                display: 'flex'
                            }}>
                                <SafeAreaView style={{
                                    maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    paddingLeft: pad,
                                    paddingRight: pad
                                }}>
                                    <Text style={{fontFamily: 'Tahoma', fontSize: fS}}>Приватный аккаунт</Text>
                                    <TouchableOpacity onPress={() => {
                                        this.changePrivate()
                                    }}>
                                        {!this.state.private ?
                                            <SafeAreaView style={{
                                                width: 50,
                                                height: 27,
                                                backgroundColor: 'grey',
                                                borderRadius: 15,
                                                padding: 1
                                            }}>
                                                <SafeAreaView style={{
                                                    marginLeft: 1,
                                                    width: 25,
                                                    height: 25,
                                                    backgroundColor: 'white',
                                                    borderRadius: 12
                                                }}>
                                                </SafeAreaView>
                                            </SafeAreaView>
                                            :
                                            <SafeAreaView style={{
                                                width: 50,
                                                height: 27,
                                                backgroundColor: '#66dca0',
                                                borderRadius: 15,
                                                padding: 1
                                            }}>
                                                <SafeAreaView style={{
                                                    marginLeft: 23,
                                                    width: 25,
                                                    height: 25,
                                                    backgroundColor: 'white',
                                                    borderRadius: 12
                                                }}>
                                                </SafeAreaView>
                                            </SafeAreaView>
                                        }
                                    </TouchableOpacity>
                                </SafeAreaView>
                                <SafeAreaView style={{
                                    maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    paddingLeft: pad,
                                    paddingRight: pad
                                }}>
                                    <Text style={{fontFamily: 'Tahoma', fontSize: fS2, color: '#a9a9a9'}}>Ваш аккаунт и
                                        ваши события смогут просматривать только ваши подписчики</Text>
                                </SafeAreaView>
                                {this.state.private ?
                                    <SafeAreaView style={{
                                        maxWidth: this.maxWidth,
                                        width: this.maxWidth,
                                        flexDirection: 'row',
                                        justifyContent: 'flex-start',
                                        paddingLeft: pad,
                                        paddingRight: pad
                                    }}>
                                        <TouchableOpacity onPress={()=>{this.showReqs()}} style={{marginTop: 10}}>
                                            <Image source={reqs} style={{width: picW, height: picH}}/>
                                        </TouchableOpacity>
                                    </SafeAreaView>
                                    :
                                    null
                                }
                                <SafeAreaView style={{
                                    width: '100%',
                                    backgroundColor: '#a9a9a9',
                                    height: 1,
                                    marginTop: 10
                                }}></SafeAreaView>
                                <SafeAreaView style={{
                                    marginTop: 10,
                                    maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    paddingLeft: pad,
                                    paddingRight: pad
                                }}>
                                    <Text style={{fontFamily: 'Tahoma', fontSize: fS2, marginTop: mt}}>Ваш город:</Text>
                                    <TouchableOpacity onPress={() => {
                                        this.changeCity()
                                    }}>
                                        <SafeAreaView style={{
                                            borderRadius: 5,
                                            padding: 4,
                                            borderWidth: 1,
                                            borderStyle: 'solid',
                                            borderColor: '#909090',
                                            maxWidth: 200,
                                            width: 200,
                                            height: 30,
                                            flexDirection: 'row',
                                            justifyContent: 'space-between',
                                        }}>
                                            <Text style={{
                                                maxWidth: 150,
                                                overflow: 'hidden',
                                                fontFamily: 'ProximaNova',
                                                color: '#ff0068'
                                            }}>{this.state.city}</Text>
                                            <Text>&#9660;</Text>
                                        </SafeAreaView>
                                    </TouchableOpacity>
                                </SafeAreaView>
                                <SafeAreaView style={{
                                    width: '100%',
                                    backgroundColor: '#a9a9a9',
                                    height: 1,
                                    marginTop: 10
                                }}></SafeAreaView>
                                <SafeAreaView style={{marginTop: 10,
                                    maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    flexDirection: 'column',
                                    justifyContent: 'center',
                                    paddingLeft: pad,
                                    paddingRight: pad}}>
                                    <SafeAreaView style={{width: '100%', flexDirection: 'row',
                                        justifyContent: 'space-between'}}>
                                        <Text style={{fontFamily: 'Tahoma', fontSize: fS2, marginTop: mt+5}}>Пароль</Text>
                                        <SafeAreaView style={{width: 20}}></SafeAreaView>
                                        <Input style={[styles.inp, {height: 30, maxHeight: 30}]} secureTextEntry={true}
                                               onChange={e => this.setState({pass:  e.nativeEvent.text})} />
                                        <SafeAreaView style={{width: 20}}></SafeAreaView>
                                        <TouchableOpacity
                                            style={{
                                                borderRadius: 5,
                                                backgroundColor: '#ff0068',
                                                padding: 5,
                                                paddingTop: 10,
                                                height: 40,
                                                justifyContent: 'center',
                                                alignItems: 'center',
                                                alignContent: 'center'
                                            }}
                                            onPress={()=>{this.setNewPass()}}>
                                            <Text style={{
                                                color: 'white',
                                                fontSize: fS2,
                                                fontWeight: 'bold',
                                                fontFamily: 'ProximaNova',
                                                textTransform: 'uppercase'
                                            }}>Изменить</Text>
                                        </TouchableOpacity>
                                    </SafeAreaView>

                                    <SafeAreaView style={{width: '100%', flexDirection: 'row',
                                        justifyContent: 'space-between', marginTop: 10}}>
                                        <Text style={{fontFamily: 'Tahoma', fontSize: fS2, marginTop: mt+5}}>E-mail:</Text>
                                        <SafeAreaView style={{width: 20}}></SafeAreaView>
                                        <Input style={[styles.inp, {height: 30, maxHeight: 30}]}
                                               placeholder={this.nCstate.login.email}
                                               placeholderTextColor='#b9b9b9'
                                               onChange={e => this.setState({mail: e.nativeEvent.text})} />
                                        <SafeAreaView style={{width: 20}}></SafeAreaView>
                                        <TouchableOpacity
                                            style={{
                                                borderRadius: 5,
                                                backgroundColor: '#ff0068',
                                                padding: 5,
                                                paddingTop: 10,
                                                height: 40,
                                                justifyContent: 'center',
                                                alignItems: 'center',
                                                alignContent: 'center'
                                            }}
                                            onPress={()=>{this.setNewMail()}}>
                                            <Text style={{
                                                color: 'white',
                                                fontSize: fS2,
                                                fontWeight: 'bold',
                                                fontFamily: 'ProximaNova',
                                                textTransform: 'uppercase'
                                            }}>Изменить</Text>
                                        </TouchableOpacity>
                                    </SafeAreaView>
                                </SafeAreaView>
                                <SafeAreaView style={{
                                    width: '100%',
                                    backgroundColor: '#a9a9a9',
                                    height: 1,
                                    marginTop: 10
                                }}></SafeAreaView>
                                <SafeAreaView style={{
                                    maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    marginTop: 10,
                                    flexDirection: 'row',
                                    justifyContent: 'space-between',
                                    paddingLeft: pad,
                                    paddingRight: pad
                                }}>
                                    <Text style={{fontFamily: 'Tahoma', fontSize: fS}}>Уведомления</Text>
                                    <TouchableOpacity onPress={() => {
                                        this.changePopup()
                                    }}>
                                        {!this.state.popup ?
                                            <SafeAreaView style={{
                                                width: 50,
                                                height: 27,
                                                backgroundColor: 'grey',
                                                borderRadius: 15,
                                                padding: 1
                                            }}>
                                                <SafeAreaView style={{
                                                    marginLeft: 1,
                                                    width: 25,
                                                    height: 25,
                                                    backgroundColor: 'white',
                                                    borderRadius: 12
                                                }}>
                                                </SafeAreaView>
                                            </SafeAreaView>
                                            :
                                            <SafeAreaView style={{
                                                width: 50,
                                                height: 27,
                                                backgroundColor: '#66dca0',
                                                borderRadius: 15,
                                                padding: 1
                                            }}>
                                                <SafeAreaView style={{
                                                    marginLeft: 23,
                                                    width: 25,
                                                    height: 25,
                                                    backgroundColor: 'white',
                                                    borderRadius: 12
                                                }}>
                                                </SafeAreaView>
                                            </SafeAreaView>
                                        }
                                    </TouchableOpacity>
                                </SafeAreaView>
                                <SafeAreaView style={{
                                    maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    flexDirection: 'column',
                                    justifyContent: 'flex-start',
                                    paddingLeft: pad,
                                    paddingRight: pad
                                }}>
                                    <Text style={{fontFamily: 'Tahoma', fontSize: fS2, color: '#a9a9a9'}}>При отключении уведомлений вы не сможете получать оповещения о новых сообщениях</Text>
                                </SafeAreaView>

                                <SafeAreaView style={{
                                    width: '100%',
                                    backgroundColor: '#a9a9a9',
                                    height: 1,
                                    marginTop: 10
                                }}></SafeAreaView>
                                <SafeAreaView style={{maxWidth: this.maxWidth,
                                    width: this.maxWidth,
                                    marginTop: 10,
                                    flexDirection: 'row',
                                    justifyContent: 'flex-start',
                                    paddingLeft: pad,
                                    paddingRight: pad}}>
                                    <SafeAreaView style={{maxWidth: this.maxWidth-200, flexDirection: 'column', justifyContent: 'flex-start'}}>
                                        <TouchableOpacity onPress={()=>{this.showM(1)}}>
                                            <Text style={{fontFamily: 'Tahoma', fontSize: fS2, fontWeight: 'bold', marginTop: 5}}>Помощь</Text>
                                        </TouchableOpacity>
                                        <TouchableOpacity onPress={()=>{this.showM(2)}}>
                                            <Text style={{fontFamily: 'Tahoma', fontSize: fS2,fontWeight: 'bold', marginTop: 5}}>Информация</Text>
                                        </TouchableOpacity>
                                        <TouchableOpacity onPress={()=>{this.delConf()}}>
                                            <Text style={{color: '#ff0068', fontSize: fS2, fontFamily: 'Tahoma', fontWeight: 'bold', marginTop: 5}}>Удалить аккаунт</Text>
                                        </TouchableOpacity>
                                    </SafeAreaView>
                                </SafeAreaView>

                            </SafeAreaView>
                        </ScrollView>
                    </SafeAreaView>
                    <Bottom navigate={this.navi.navigate}/>
                </Container>
            )
        }
    }
}

const styles = StyleSheet.create({
    inp: {
        width: '30%',
        minHeight: 40,
        backgroundColor: '#ececec',
        borderColor: '#909090',
        borderStyle: 'solid',
        borderWidth: 1,
        borderRadius: 5,
        color: '#909090'
    },
    header: {
        maxHeight: 70,
        minHeight: 70,
        height: 70,
        paddingTop: 20,
        width: '100%',
        alignContent: "center",
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        flexWrap: 'nowrap',
        flexDirection: "row",
        fontSize: 24
        /*textTransform: 'uppercase'*/
    },
    centeredView: {
        flex: 1,
        display: 'flex',
        flexDirection: "row",
        alignContent: "center",
        justifyContent: "center",
        alignItems: "center",
        flexWrap: 'nowrap',
        width: '100%',
        height: '100%',
        marginTop: 22
    },
    main: {
        width: '100%',
        flex: 1,
        justifyContent: "space-between",
        alignItems: "center",
        flexDirection: 'column'
    },
    item1: {
        /*flex: 1,*/
        /*justifyContent: "center",*/
        alignItems: "center",
        width: '100%'
        /*flexDirection: 'column',*/
        /*alignContent: "center"*/
    },
    afisha: {
        resizeMode: 'cover',
        width: 272,
        height: 365,
        margin: 5
    },
    baseText: {
        fontWeight: 'bold',
        color: '#000',
        fontFamily: 'Tahoma'
    },
    innerText: {
        fontWeight: 'bold',
        color: '#cacaca',
        fontFamily: 'Tahoma'
    },
    treyg: {
        width: 10,
        height: 10,
        position: 'relative'
    },
    avka: {
        width: 350,
        height: 350,
        resizeMode: 'cover',
        borderRadius: 175
    },
    loader: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        zIndex: 9999
    },
    loaderContainer: {
        flex: 1,
        width: '100%',
        height: '100%'
    },
    modalView: {
        margin: 20,
        backgroundColor: "white",
        borderRadius: 20,
        padding: 35,
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 2
        },
        shadowOpacity: 0.25,
        shadowRadius: 4,
        elevation: 5
    },
    button: {
        borderRadius: 20,
        padding: 10,
        elevation: 2
    },
    buttonOpen: {
        backgroundColor: "#F194FF",
    },
    buttonClose: {
        backgroundColor: "#2196F3",
    },
    textStyle: {
        color: "white",
        fontWeight: "bold",
        textAlign: "center"
    },
    modalText: {
        marginBottom: 15,
        textAlign: "center"
    }
});